#!/usr/bin/env python

'''
Simple "Square Detector" program.

Loads several images sequentially and tries to find squares in each image.
'''

# Python 2/3 compatibility
import sys
PY3 = sys.version_info[0] == 3
print("Python version ", sys.version_info[0], ".", sys.version_info[1], ".", sys.version_info[2])

if PY3:
    xrange = range

import numpy as np
import cv2


def angle_cos(p0, p1, p2):
    d1, d2 = (p0-p1).astype('float'), (p2-p1).astype('float')
    return abs( np.dot(d1, d2) / np.sqrt( np.dot(d1, d1)*np.dot(d2, d2) ) )

"""
def find_squares(img):
    img = cv2.GaussianBlur(img, (5, 5), 0)
    squares = []
    for gray in cv2.split(img):
        for thrs in xrange(0, 255, 26):
            if thrs == 0:
                bin = cv2.Canny(gray, 0, 50, apertureSize=5)
                bin = cv2.dilate(bin, None)
            else:
                retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)
            
            cv2.imshow('bin', bin)
            bin, contours, hierarchy = cv2.findContours(bin, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
            
            for cnt in contours:
                cnt_len = cv2.arcLength(cnt, True)
                cnt = cv2.approxPolyDP(cnt, 0.02*cnt_len, True)
                if len(cnt) == 4 and cv2.contourArea(cnt) > 5000 and cv2.contourArea(cnt) < 15000 and cv2.isContourConvex(cnt): #cv2.contourArea(cnt) < 8000
                    cnt = cnt.reshape(-1, 2)
                    max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+2) % 4] ) for i in xrange(4)])
                    if max_cos < 0.1:
                        squares.append(cnt)
    return squares
"""

def find_squares(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
    ## Need try more method for better result, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
    img = cv2.bilateralFilter(img, 11, 17, 17)  # bilateralFilter is highly effective in noise removal while keeping edges sharp.
    img = cv2.medianBlur(img, 5)
    #kernel = np.ones((5,5),np.uint8)
    #img = cv2.dilate(img,kernel,iterations = 1)
    #img = cv2.erode(img,kernel,iterations = 1)
    #img = cv2.Canny(img, 30, 200)
    cv2.imshow('filter of img', img)
    
    squares = []
    for gray in cv2.split(img):
        for thrs in xrange(0, 255, 26):
            if thrs == 0:
                bin = cv2.Canny(gray, 0, 50, apertureSize=5)
                bin = cv2.dilate(bin, None)
            else:
                retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)
            
            cv2.imshow('filter of bin', bin)
            bin, contours, hierarchy = cv2.findContours(bin, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
            #cv2.imshow('filter of bin', bin)
            
            for cnt in contours:
                cnt_len = cv2.arcLength(cnt, True)
                cnt = cv2.approxPolyDP(cnt, 0.02*cnt_len, True)
                if len(cnt) == 4 and cv2.contourArea(cnt) > 5000 and cv2.contourArea(cnt) < 15000 and cv2.isContourConvex(cnt): #cv2.contourArea(cnt) < 8000
                    cnt = cnt.reshape(-1, 2)
                    max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+2) % 4] ) for i in xrange(4)])
                    if max_cos < 0.1:
                        squares.append(cnt)
    return squares


#def find_angle(squares)
#	(x,y),(MA,ma),angle = cv2.fitEllipse(squares)

if __name__ == '__main__':
    from glob import glob
    #for fn in glob('../data/pic*.png'):#20160201-150810.ppm
    for fn in glob('20160205-170407.jpg'):#20160201-150810.ppm
        img = cv2.imread(fn)
        squares = find_squares(img)
        #squares = np.uint16(np.around(squares))
        #Ellipse = cv2.fitEllipse(squares)
        #[vx,vy,x,y] = cv2.fitLine(squares[0], cv2.DIST_L2,0,0.01,0.01) # not work for points? TypeError: points is not a numpy array, neither a scalar
        cv2.drawContours( img, squares, -1, (0, 255, 0), 3 )
        cv2.imshow('squares from' + fn, img)
        ch = 0xFF & cv2.waitKey()
        if ch == 27:
            break
    cv2.destroyAllWindows()
